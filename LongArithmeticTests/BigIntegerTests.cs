
using LongArithmetic;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LongArithmeticTests
{
	[TestFixture]
    public class BigIntegerTests
    {
//-----------------Adition-----------------------------------------------------------------------------------------		

		[Test]
		
		[TestCase("5C353D8D758E06E4DFFB37B5",
		"0",
		"5C353D8D758E06E4DFFB37B5")]
		
		[TestCase("5C353D8D758E06E4DFFB37B5",
		"1",
		"5C353D8D758E06E4DFFB37B6")]
		
		[TestCase("354FE50A9396DA3D5BDB6327FBF7DE11871BF3D0143055EC2AB3786D3A85E62EC763A05A73A7F08D21EEE3CBCAE207E40854121BFF8258F7B2B293B0D30277CD",
		"58800406778F64750E949A6D229AC61FCD424632593C4735A664199B424E606126A31B875E3D5E9E9C2E13D6995CC801E60C30247808A6EE01E78895E16EAD95",
		"8DCFE9110B263EB26A6FFD951E92A431545E3A026D6C9D21D11792087CD4468FEE06BBE1D1E54F2BBE1CF7A2643ECFE5EE604240778AFFE5B49A1C46B4712562")]
		
		[TestCase("B427629D0ECE5E77476643F0310B1FCF029CA9286165FD5638CDD88155E5E68A2B66FC28861FB57657E27A1D41D3E61730FAB712FB0E55728443D1A18C27DE41",
		"5DAC441A8D178EEA44A1925C8CA96F87CAD1A377C0A32F6B1B5EF9B9C35EB4C880A08ABDA44199E807A4938658C6EC7CA27C558C226EE5E24E3CA8DA66A74E71",
		"111D3A6B79BE5ED618C07D64CBDB48F56CD6E4CA022092CC1542CD23B19449B52AC0786E62A614F5E5F870DA39A9AD293D3770C9F1D7D3B54D2807A7BF2CF2CB2")]
		
		[TestCase("AFB69AD91CB62A4F1A955E271B78D8DFF74A4128CF9404854AF14C11BE5B37E96DE97B2F54F668FEBED6162E30FD36D3B6F960A67E1129706EC5A0EF57DD3E45",
		"8FCAA5A2D5E40D532389BC06A797E51A224CA67B43D9FD5D056F5E4020FF7266F3B30337952B3E694B579C82C1BFD3BC6B64FA7BA85804237852F410B5F276C4",
		"13F81407BF29A37A23E1F1A2DC310BDFA1996E7A4136E01E25060AA51DF5AAA50619C7E66EA21A7680A2DB2B0F2BD0A90225E5B2226692D93E71895000DCFB509")]
		
		[TestCase("62D85A0F903DD94865435F59E9785DCF8593C0DB4E73D3A7FBB3EC99B6CD4C3528A93806608DD6F2F1396068E75EEF79D25FA18F36D39F44AAFB26454367B2E2",
		"2820EE434847B161C014E717E54207FFCD348088E58A83BF460679142250F9DD3ACAC62FFC55C6446F9F4782F3F144B8CA072CB149F1876A55A9D117A84F0980",
		"8AF94852D8858AAA25584671CEBA65CF52C8416433FE576741BA65ADD91E46126373FE365CE39D3760D8A7EBDB5034329C66CE4080C526AF00A4F75CEBB6BC62")]
		
		[TestCase("E3AE74A8EC74A313C8BED20D4349D9EFBA356FE6E8AD89E21C2D028111C06F422DC8E0F2E5F448830D1D61B5A7AEAC088E31AA290891E06AD83C0786443611AF",
		"49FE1165CB7A21D12D6ACEC225285544B36BABD3F8B4DD8D94EDE1A444B9738ADF06CDB40DCAFA87B25A8BECA2D2262A53D8431A119405F0CBEFB83D2AD547CC",
		"12DAC860EB7EEC4E4F629A0CF68722F346DA11BBAE162676FB11AE4255679E2CD0CCFAEA6F3BF430ABF77EDA24A80D232E209ED431A25E65BA42BBFC36F0B597B")]
		
		[TestCase("8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D758E06E4DFFB37B57A66ECC52CF2D7D888C49C2794E6FB944C4183A128203932FEBEA4B6E62B2EBDAD",
		"4112652E8135D145329F0DAE738F75C35004A154F1C43449DB87B6BE0F3EBF5B3BA1016F0A04A10C7EA76C3D30EEDB34B1E6E1009B3FF5C987FA313097485E6F",
		"CD8AD97CB07FB0A803D9DFB3539EE8DEFE12A9B12701C1BF698E9B9E0A7674D5A28DC69BFCDC7995434393D217EA6F80F36A8228BB7928C8469EE816C2771C1C")]

		public void AdditionTests(string a, string b, string expected) {
			var a_number = new BigInteger(a);
			var b_number = new BigInteger(b);

			var actual = a_number.Add(b_number).ToHex();

			Assert.AreEqual(expected, actual);
		}


//-----------------Substraction-------------------------------------------------------------------------------------		
		[Test]
		
		[TestCase("5C353D8D758E06E4DFFB37B5",
		"0",
		"5C353D8D758E06E4DFFB37B5")]
		
		[TestCase("5C353D8D758E06E4DFFB37B5",
		"1",
		"5C353D8D758E06E4DFFB37B4")]
		
		[TestCase("354FE50A9396DA3D5BDB6327FBF7DE11871BF3D0143055EC2AB3786D3A85E62EC763A05A73A7F08D21EEE3CBCAE207E40854121BFF8258F7B2B293B0D30277CD",
		"58800406778F64750E949A6D229AC61FCD424632593C4735A664199B424E606126A31B875E3D5E9E9C2E13D6995CC801E60C30247808A6EE01E78895E16EAD95",
		"58800406778F64750E949A6D229AC61FCD424632593C4735A664199B424E606126A31B875E3D5E9E9C2E13D6995CC801E60C30247808A6EE01E78895E16EAD95")]
		
		[TestCase("B427629D0ECE5E77476643F0310B1FCF029CA9286165FD5638CDD88155E5E68A2B66FC28861FB57657E27A1D41D3E61730FAB712FB0E55728443D1A18C27DE41",
		"5DAC441A8D178EEA44A1925C8CA96F87CAD1A377C0A32F6B1B5EF9B9C35EB4C880A08ABDA44199E807A4938658C6EC7CA27C558C226EE5E24E3CA8DA66A74E71",
		"567B1E8281B6CF8D02C4B193A461B04737CB05B0A0C2CDEB1D6EDEC7928731C1AAC6716AE1DE1B8E503DE696E90CF99A8E7E6186D89F6F90360728C725808FD0")]
		
		[TestCase("AFB69AD91CB62A4F1A955E271B78D8DFF74A4128CF9404854AF14C11BE5B37E96DE97B2F54F668FEBED6162E30FD36D3B6F960A67E1129706EC5A0EF57DD3E45",
		"8FCAA5A2D5E40D532389BC06A797E51A224CA67B43D9FD5D056F5E4020FF7266F3B30337952B3E694B579C82C1BFD3BC6B64FA7BA85804237852F410B5F276C4",
		"1FEBF53646D21CFBF70BA22073E0F3C5D4FD9AAD8BBA07284581EDD19D5BC5827A3677F7BFCB2A95737E79AB6F3D63174B94662AD5B9254CF672ACDEA1EAC781")]
		
		[TestCase("E3AE74A8EC74A313C8BED20D4349D9EFBA356FE6E8AD89E21C2D028111C06F422DC8E0F2E5F448830D1D61B5A7AEAC088E31AA290891E06AD83C0786443611AF",
		"49FE1165CB7A21D12D6ACEC225285544B36BABD3F8B4DD8D94EDE1A444B9738ADF06CDB40DCAFA87B25A8BECA2D2262A53D8431A119405F0CBEFB83D2AD547CC",
		"99B0634320FA81429B54034B1E2184AB06C9C412EFF8AC54873F20DCCD06FBB74EC2133ED8294DFB5AC2D5C904DC85DE3A59670EF6FDDA7A0C4C4F491960C9E3")]
		
		[TestCase("8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D758E06E4DFFB37B57A66ECC52CF2D7D888C49C2794E6FB944C4183A128203932FEBEA4B6E62B2EBDAD",
		"4112652E8135D145329F0DAE738F75C35004A154F1C43449DB87B6BE0F3EBF5B3BA1016F0A04A10C7EA76C3D30EEDB34B1E6E1009B3FF5C987FA313097485E6F",
		"4B660F1FAE140E1D9E9BC4566C7FFD585E0967074379592BB27F2E21EBF8F61F2B4BC3BDE8D3377C45F4BB57B60CB9178F9CC02784F93D3536AA85B593E65F3E")]
		
		public void SubTest(string a, string b, string expected) {
			BigInteger a_number = new BigInteger(a);
			BigInteger b_number = new BigInteger(b);

			string actual = a_number.Deduct(b_number).ToHex();

			Assert.AreEqual(expected, actual);
	
		}
//-----------------Multiplication-------------------------------------------------------------------------------------		

		[Test]
		
		[TestCase("5C353D8D758E06E4DFFB37B5",
		"0",
		"0")]
		
		[TestCase("5C353D8D758E06E4DFFB37B5",
		"1",
		"5C353D8D758E06E4DFFB37B5")]
		
		[TestCase("354FE50A9396DA3D5BDB6327FBF7DE11871BF3D0143055EC2AB3786D3A85E62EC763A05A73A7F08D21EEE3CBCAE207E40854121BFF8258F7B2B293B0D30277CD",
		"58800406778F64750E949A6D229AC61FCD424632593C4735A664199B424E606126A31B875E3D5E9E9C2E13D6995CC801E60C30247808A6EE01E78895E16EAD95",
		"126E1F84C05F2F0478BC1BB97EA870E2357DFF1FA3ED0F8D9E4F2C4B1CF933D3F64BD22D9761FD598EF8F381AB2A84294359B2EE43D70170CF9182EBB961D56D19970429DEF02494C95B341ACC75EFF227A0D4BDD9149483D9D7143D56B3C25D8B55B81433AD812F60A7F4234854EB569EC021432DA486C3963DED2F227B4351")]
		
		[TestCase("B427629D0ECE5E77476643F0310B1FCF029CA9286165FD5638CDD88155E5E68A2B66FC28861FB57657E27A1D41D3E61730FAB712FB0E55728443D1A18C27DE41",
		"5DAC441A8D178EEA44A1925C8CA96F87CAD1A377C0A32F6B1B5EF9B9C35EB4C880A08ABDA44199E807A4938658C6EC7CA27C558C226EE5E24E3CA8DA66A74E71",
		"41EB89367562EC483164D0C6D5CADBDFA26C21CA40EEC1901C0ACAA8D2DD4B7AAA098AF873217DC3E34AE4A3D838DD3896AFD43B8C8336D47B41F082EB60FC1AAD6BA433EA3528F54ECF544CB7252EFA3CC6E1398D56723BC109BC9D23F079ABC7EB03DCCC266BDB80A08EEAC6D6B9AFBFC8E0899297CA9A9312FCECE5B7E8B1")]
		
		[TestCase("AFB69AD91CB62A4F1A955E271B78D8DFF74A4128CF9404854AF14C11BE5B37E96DE97B2F54F668FEBED6162E30FD36D3B6F960A67E1129706EC5A0EF57DD3E45",
		"8FCAA5A2D5E40D532389BC06A797E51A224CA67B43D9FD5D056F5E4020FF7266F3B30337952B3E694B579C82C1BFD3BC6B64FA7BA85804237852F410B5F276C4",
		"62B21845EC85CCE30B870AE3825560BD43B7084466385E0E87D5BF6D92CA8BC8F5B7AED2293324C1AD4EC918A83FFA40051F788850BBAC2C4A9E0DE0E81A8F88B11FEA1BFFCB325B2959CFE1463F864598D6DB36F4517F8F8BD552CA2E64FF342D7B127B196A6B0019F0CE9DE0B9A691640A5B9D48609EF0EA25AE3AE6517AD4")]
		
		[TestCase("E3AE74A8EC74A313C8BED20D4349D9EFBA356FE6E8AD89E21C2D028111C06F422DC8E0F2E5F448830D1D61B5A7AEAC088E31AA290891E06AD83C0786443611AF",
		"49FE1165CB7A21D12D6ACEC225285544B36BABD3F8B4DD8D94EDE1A444B9738ADF06CDB40DCAFA87B25A8BECA2D2262A53D8431A119405F0CBEFB83D2AD547CC",
		"41CEB5D50993124C8D951848991313DADE6A8256164A88D127F37B06B2161DDE0FAD33AD6ADC0CA2566ECC3A2EF9C350343882C69C91499FCF31D378CFC2D00F4E000DC698B53DDF4B1DB1E7B1959EC7A3CF344991F79C37F1F5FD8F9F2E754F5C7BC2239BE2F2F0AC66FBCA5261F9B96BF215918D3813E0A4CCDA7FC698A074")]
		
		[TestCase("8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D758E06E4DFFB37B57A66ECC52CF2D7D888C49C2794E6FB944C4183A128203932FEBEA4B6E62B2EBDAD",
		"4112652E8135D145329F0DAE738F75C35004A154F1C43449DB87B6BE0F3EBF5B3BA1016F0A04A10C7EA76C3D30EEDB34B1E6E1009B3FF5C987FA313097485E6F",
		"23B4AD8511EF0DFE39B0C45740D1D44014159011C1B6FD1FEFE34D292664C40DA5DEFB006E62B180AE61B61E8F03C81EF62858C9C2D317C6A1E5264CE92D0F2B08120791F3987C47F38F32558E187D28E05B8127EB60FBBB71747BB0D3460DFBE92DEDD26048A1915A6CB134D528509CA8A0A158E6DC1596D9CC361E4691C403")]
		
		public void MultiplyTest(string a, string b, string expected) {
			BigInteger a_number = new BigInteger(a);
			BigInteger b_number = new BigInteger(b);

			string actual = a_number.Multiply(b_number).ToHex();

			Assert.AreEqual(expected, actual);
	
		}
//-----------------Comparison-------------------------------------------------------------------------------------		

		[Test]
		
		[TestCase("5C353D8D758E06E4DFFB37B5",
		"0",
		1)]
		
		[TestCase("5C353D8D758E06E4DFFB37B5",
		"1",
		1)]
		
		[TestCase("354FE50A9396DA3D5BDB6327FBF7DE11871BF3D0143055EC2AB3786D3A85E62EC763A05A73A7F08D21EEE3CBCAE207E40854121BFF8258F7B2B293B0D30277CD",
		"58800406778F64750E949A6D229AC61FCD424632593C4735A664199B424E606126A31B875E3D5E9E9C2E13D6995CC801E60C30247808A6EE01E78895E16EAD95",
		-1)]
		
		[TestCase("B427629D0ECE5E77476643F0310B1FCF029CA9286165FD5638CDD88155E5E68A2B66FC28861FB57657E27A1D41D3E61730FAB712FB0E55728443D1A18C27DE41",
		"5DAC441A8D178EEA44A1925C8CA96F87CAD1A377C0A32F6B1B5EF9B9C35EB4C880A08ABDA44199E807A4938658C6EC7CA27C558C226EE5E24E3CA8DA66A74E71",
		1)]
		
		[TestCase("AFB69AD91CB62A4F1A955E271B78D8DFF74A4128CF9404854AF14C11BE5B37E96DE97B2F54F668FEBED6162E30FD36D3B6F960A67E1129706EC5A0EF57DD3E45",
		"8FCAA5A2D5E40D532389BC06A797E51A224CA67B43D9FD5D056F5E4020FF7266F3B30337952B3E694B579C82C1BFD3BC6B64FA7BA85804237852F410B5F276C4",
		1)]
		
		[TestCase("E3AE74A8EC74A313C8BED20D4349D9EFBA356FE6E8AD89E21C2D028111C06F422DC8E0F2E5F448830D1D61B5A7AEAC088E31AA290891E06AD83C0786443611AF",
		"49FE1165CB7A21D12D6ACEC225285544B36BABD3F8B4DD8D94EDE1A444B9738ADF06CDB40DCAFA87B25A8BECA2D2262A53D8431A119405F0CBEFB83D2AD547CC",
		1)]
		
		[TestCase("43A84EC880F94941EDB562C98F90F0E9C2E1F9CAA58D189D72E00F25C6961CE73B3407AD84B78DA5EAFD68217852CACC9CEA9969BF6E45DF85FF71D762B6EE01",
		"69EC4BE00B3EFA9C912B77B3AD086B0D238E532A2E7908A0646DE3EE3C89E2261A01403D953F8168A96B573AEC669AED43040503E25BDBA3DDF6209287D6AFC1",
		-1)]		

		[TestCase("8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D758E06E4DFFB37B57A66ECC52CF2D7D888C49C2794E6FB944C4183A128203932FEBEA4B6E62B2EBDAD",
		"4112652E8135D145329F0DAE738F75C35004A154F1C43449DB87B6BE0F3EBF5B3BA1016F0A04A10C7EA76C3D30EEDB34B1E6E1009B3FF5C987FA313097485E6F",
		1)]
		
		public void ComparisonTest(string a, string b, int expected) {
			BigInteger a_number = new BigInteger(a);
			BigInteger b_number = new BigInteger(b);

			int actual = a_number.Comprassion(b_number);

			Assert.AreEqual(expected, actual);
	
		}
//-----------------Barrett-------------------------------------------------------------------------------------		

		[Test]
		
		[TestCase("5C353D8D758E06E4DFFB37B5",
		"0",
		"1")]
		
		[TestCase("5C353D8D758E06E4DFFB37B5",
		"1",
		"5C353D8D758E06E4DFFB37B5")]
		
		[TestCase("354FE50A9396DA3D5BDB6327FBF7DE11871BF3D0143055EC2AB3786D3A85E62EC763A05A73A7F08D21EEE3CBCAE207E40854121BFF8258F7B2B293B0D30277CD",
		"58800406778F64750E949A6D229AC61FCD424632593C4735A664199B424E606126A31B875E3D5E9E9C2E13D6995CC801E60C30247808A6EE01E78895E16EAD95",
		"82A5BE9AB634AE6F3E97F0FC860DF7B756BC")]
		
		[TestCase("B427629D0ECE5E77476643F0310B1FCF029CA9286165FD5638CDD88155E5E68A2B66FC28861FB57657E27A1D41D3E61730FAB712FB0E55728443D1A18C27DE41",
		"5DAC441A8D178EEA44A1925C8CA96F87CAD1A377C0A32F6B1B5EF9B9C35EB4C880A08ABDA44199E807A4938658C6EC7CA27C558C226EE5E24E3CA8DA66A74E71",
		"2D03C002D621D33E44BD98AF64925D34876B")]
		
		[TestCase("AFB69AD91CB62A4F1A955E271B78D8DFF74A4128CF9404854AF14C11BE5B37E96DE97B2F54F668FEBED6162E30FD36D3B6F960A67E1129706EC5A0EF57DD3E45",
		"8FCAA5A2D5E40D532389BC06A797E51A224CA67B43D9FD5D056F5E4020FF7266F3B30337952B3E694B579C82C1BFD3BC6B64FA7BA85804237852F410B5F276C4",
		"D043B08A9169DB8FEEB8BE3525B61C4F913F")]
		
		[TestCase("E3AE74A8EC74A313C8BED20D4349D9EFBA356FE6E8AD89E21C2D028111C06F422DC8E0F2E5F448830D1D61B5A7AEAC088E31AA290891E06AD83C0786443611AF",
		"49FE1165CB7A21D12D6ACEC225285544B36BABD3F8B4DD8D94EDE1A444B9738ADF06CDB40DCAFA87B25A8BECA2D2262A53D8431A119405F0CBEFB83D2AD547CC",
		"1A347BBDCB2790F738BA54532D17567D0162")]
		
		[TestCase("8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D758E06E4DFFB37B57A66ECC52CF2D7D888C49C2794E6FB944C4183A128203932FEBEA4B6E62B2EBDAD",
		"4112652E8135D145329F0DAE738F75C35004A154F1C43449DB87B6BE0F3EBF5B3BA1016F0A04A10C7EA76C3D30EEDB34B1E6E1009B3FF5C987FA313097485E6F",
		"3E14B5A0A9F8D65F66ECD26B95E8B8CFADA0")]

		
		public void GornerBarrettTest(string a, string b, string expected) {
			BigInteger a_number = new BigInteger(a);
			BigInteger b_number = new BigInteger(b);
			BigInteger n = new BigInteger("D53621DF4872C0773988508C484157D62D8B");
			
			string actual = a_number.GoGornerPowerByBarrett(b_number, n).ToHex();

			Assert.AreEqual(expected, actual);
	
		}
	
//-----------------Barrett-------------------------------------------------------------------------------------		
		[Test]
		
		[TestCase("8",
		"0",
		"8")]
		
		[TestCase("8",
		"5",
		"1")]
	
		[TestCase("C",
		"6",
		"6")]
	
		public void GCD (string a, string b, string expected) {
			BigInteger a_number = new BigInteger(a);
			BigInteger b_number = new BigInteger(b);
				
			string actual = BigInteger.gcd_lcm(a_number, b_number)[0].ToHex();

			Assert.AreEqual(expected, actual);
			//Assert.That(actual, Is.EqualTo(expected));
		
		}

		[Test]
		public void ModByZero(){
			
			BigInteger a_number = new BigInteger("F");

			Assert.Throws<DivideByZeroException>(() => {
				a_number.mod(new BigInteger());
			});
		}

				[Test]
		public void DivideByTests(){
			
			BigInteger a_number = new BigInteger("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
			BigInteger b_number = new BigInteger("2");
			var expected = "5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555";
			var actual = a_number.DivideBy(b_number)[0].ToHex();

			Assert.That(actual, Is.EqualTo(expected));
		}
	}
}